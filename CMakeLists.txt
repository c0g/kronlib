cmake_minimum_required(VERSION 3.2)
project(KronMat)
add_definitions(-DTHRUST_DEVICE_SYSTEM=THRUST_DEVICE_SYSTEM_CUDA)
add_definitions(-DDLIB_NO_GUI_SUPPORT)

# Additional 'FindX.cmake'
set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/CMake/Modules)

# Google test framework
include("test/gtest.cmake")

find_package(OpenBLAS)
find_package(CUDA)
find_package(TBB)
find_package(Boost)
message("CUDA version ${CUDA_VERSION}")
set(CUSOLVER_LIBRARY, "")
if(${CUDA_VERSION} LESS 7) 
    message("CUDA version < 7 - using homebrew Cholesky")
else()
    message("CUDA version >= 7 - using CUSolver Cholesky")
    add_definitions("-DCUSOLVER")
    set(CUDA_LIBRARIES "${CUDA_LIBRARIES} ${CUDA_cusolver_LIBRARY}")
endif()

# Compiler flags - if GNU add in openmp
# set(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} -G -g")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -O3") 

# Includes
include_directories(${CUDA_INCLUDE_DIRS} ${OpenBLAS_INCLUDE_DIR} ${GTEST_INCLUDE_DIR} ${Boost_INCLUDE_DIRS} thrust src inc)

## Source files for executable
set(SOURCE_FILES src/play.cu)
if(CUDA_FOUND)
	CUDA_ADD_EXECUTABLE(KronMat ${SOURCE_FILES})
	CUDA_ADD_CUBLAS_TO_TARGET(KronMat)
else()
	add_executable(KronMat ${SOURCE_FILES})
endif()

target_link_libraries(KronMat ${OpenBLAS_LIB} ${TBB_LIBRARY} ${GTEST_BOTH_LIBRARIES}  ${CUDA_LIBRARIES} )

# Tests
enable_testing()

if(CUDA_FOUND)
    CUDA_ADD_EXECUTABLE(TestHostMatrix test/TestHostMatrix.cu)
    CUDA_ADD_CUBLAS_TO_TARGET(TestHostMatrix)
    target_link_libraries(TestHostMatrix ${OpenBLAS_LIB}  ${TBB_LIBRARY} ${GTEST_LIBRARY} ${CUDA_LIBRARIES} )
    add_test(TestHostMatrix TestHostMatrix)
endif()
if(CUDA_FOUND)
    CUDA_ADD_EXECUTABLE(TestCUDAMatrix test/TestCUDAMatrix.cu)
    CUDA_ADD_CUBLAS_TO_TARGET(TestCUDAMatrix)
    target_link_libraries(TestCUDAMatrix ${OpenBLAS_LIB}  ${TBB_LIBRARY} ${GTEST_LIBRARY} ${CUDA_LIBRARIES} )
    add_test(TestCUDAMatrix TestCUDAMatrix)
endif()
if(CUDA_FOUND)
    CUDA_ADD_EXECUTABLE(TestTBBMatrix test/TestTBBMatrix.cu)
    CUDA_ADD_CUBLAS_TO_TARGET(TestTBBMatrix)
    target_link_libraries(TestTBBMatrix ${OpenBLAS_LIB}  ${TBB_LIBRARY} ${GTEST_LIBRARY} ${CUDA_LIBRARIES} )
    add_test(TestTBBMatrix TestTBBMatrix)
endif()

if(CUDA_FOUND)
    CUDA_ADD_EXECUTABLE(TestCUDAChol test/TestCUDAChol.cu)
    CUDA_ADD_CUBLAS_TO_TARGET(TestCUDAChol)
    target_link_libraries(TestCUDAChol ${OpenBLAS_LIB}  ${TBB_LIBRARY} ${GTEST_LIBRARY} ${CUDA_LIBRARIES} )
    add_test(TestCUDAChol TestCUDAChol)
endif()
if(CUDA_FOUND)
    CUDA_ADD_EXECUTABLE(TestTBBChol test/TestTBBChol.cu)
    CUDA_ADD_CUBLAS_TO_TARGET(TestTBBChol)
    target_link_libraries(TestTBBChol ${OpenBLAS_LIB}  ${TBB_LIBRARY} ${GTEST_LIBRARY} ${CUDA_LIBRARIES} )
    add_test(TestTBBChol TestTBBChol)
endif()
if(CUDA_FOUND)
    CUDA_ADD_EXECUTABLE(TestHostChol test/TestHostChol.cu)
    CUDA_ADD_CUBLAS_TO_TARGET(TestHostChol)
    target_link_libraries(TestHostChol ${OpenBLAS_LIB}  ${TBB_LIBRARY} ${GTEST_LIBRARY} ${CUDA_LIBRARIES} )
    add_test(TestHostChol TestHostChol)
endif()

if(CUDA_FOUND)
    CUDA_ADD_EXECUTABLE(TestCUDAKron test/TestCUDAKron.cu)
    CUDA_ADD_CUBLAS_TO_TARGET(TestCUDAKron)
    target_link_libraries(TestCUDAKron ${OpenBLAS_LIB}  ${TBB_LIBRARY} ${GTEST_LIBRARY} ${CUDA_LIBRARIES} )
    add_test(TestCUDAKron TestCUDAKron)
endif()
if(CUDA_FOUND)
    CUDA_ADD_EXECUTABLE(TestTBBKron test/TestTBBKron.cu)
    CUDA_ADD_CUBLAS_TO_TARGET(TestTBBKron)
    target_link_libraries(TestTBBKron ${OpenBLAS_LIB}  ${TBB_LIBRARY} ${GTEST_LIBRARY} ${TBB_LIBRARIES} )
    add_test(TestTBBKron TestTBBKron)
endif()
if(CUDA_FOUND)
    CUDA_ADD_EXECUTABLE(TestHostKron test/TestHostKron.cu)
    CUDA_ADD_CUBLAS_TO_TARGET(TestHostKron)
    target_link_libraries(TestHostKron ${OpenBLAS_LIB}  ${TBB_LIBRARY} ${GTEST_LIBRARY} ${Host_LIBRARIES} )
    add_test(TestHostKron TestHostKron)
endif()

if(FALSE) # fake multiline comment
if(CUDA_FOUND)
	CUDA_ADD_EXECUTABLE(kvs_test test/testkvs.cpp)
	CUDA_ADD_CUBLAS_TO_TARGET(kvs_test)
else()
	add_executable(kvs_test test/testkvs.cpp)
endif()
target_link_libraries(kvs_test ${CBLAS_LIBRARIES}  ${GTEST_LIBRARY}  ${LAPACKE_LIBRARIES})
add_test(kvs_test kvs_test)

if(CUDA_FOUND)
	CUDA_ADD_EXECUTABLE(sqexp_test test/testsqexp.cpp)
	CUDA_ADD_CUBLAS_TO_TARGET(sqexp_test)
else()
	add_executable(sqexp_test test/testsqexp.cpp)
endif()
target_link_libraries(sqexp_test ${CBLAS_LIBRARIES}  ${GTEST_LIBRARY}  ${LAPACKE_LIBRARIES})
add_test(sqexp_test sqexp_test)
endif()
